// Code generated by Prisma (prisma@1.23.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  categoriesEnEmbd: (where?: CategoriesEnEmbdWhereInput) => Promise<boolean>;
  category: (where?: CategoryWhereInput) => Promise<boolean>;
  shop: (where?: ShopWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  categoriesEnEmbds: (
    args?: {
      where?: CategoriesEnEmbdWhereInput;
      orderBy?: CategoriesEnEmbdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CategoriesEnEmbd>;
  categoriesEnEmbdsConnection: (
    args?: {
      where?: CategoriesEnEmbdWhereInput;
      orderBy?: CategoriesEnEmbdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CategoriesEnEmbdConnectionPromise;
  category: (where: CategoryWhereUniqueInput) => CategoryPromise;
  categories: (
    args?: {
      where?: CategoryWhereInput;
      orderBy?: CategoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Category>;
  categoriesConnection: (
    args?: {
      where?: CategoryWhereInput;
      orderBy?: CategoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CategoryConnectionPromise;
  shop: (where: ShopWhereUniqueInput) => ShopPromise;
  shops: (
    args?: {
      where?: ShopWhereInput;
      orderBy?: ShopOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Shop>;
  shopsConnection: (
    args?: {
      where?: ShopWhereInput;
      orderBy?: ShopOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ShopConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCategoriesEnEmbd: (
    data: CategoriesEnEmbdCreateInput
  ) => CategoriesEnEmbdPromise;
  updateManyCategoriesEnEmbds: (
    args: {
      data: CategoriesEnEmbdUpdateManyMutationInput;
      where?: CategoriesEnEmbdWhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyCategoriesEnEmbds: (
    where?: CategoriesEnEmbdWhereInput
  ) => BatchPayloadPromise;
  createCategory: (data: CategoryCreateInput) => CategoryPromise;
  updateCategory: (
    args: { data: CategoryUpdateInput; where: CategoryWhereUniqueInput }
  ) => CategoryPromise;
  updateManyCategories: (
    args: { data: CategoryUpdateManyMutationInput; where?: CategoryWhereInput }
  ) => BatchPayloadPromise;
  upsertCategory: (
    args: {
      where: CategoryWhereUniqueInput;
      create: CategoryCreateInput;
      update: CategoryUpdateInput;
    }
  ) => CategoryPromise;
  deleteCategory: (where: CategoryWhereUniqueInput) => CategoryPromise;
  deleteManyCategories: (where?: CategoryWhereInput) => BatchPayloadPromise;
  createShop: (data: ShopCreateInput) => ShopPromise;
  updateShop: (
    args: { data: ShopUpdateInput; where: ShopWhereUniqueInput }
  ) => ShopPromise;
  updateManyShops: (
    args: { data: ShopUpdateManyMutationInput; where?: ShopWhereInput }
  ) => BatchPayloadPromise;
  upsertShop: (
    args: {
      where: ShopWhereUniqueInput;
      create: ShopCreateInput;
      update: ShopUpdateInput;
    }
  ) => ShopPromise;
  deleteShop: (where: ShopWhereUniqueInput) => ShopPromise;
  deleteManyShops: (where?: ShopWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  categoriesEnEmbd: (
    where?: CategoriesEnEmbdSubscriptionWhereInput
  ) => CategoriesEnEmbdSubscriptionPayloadSubscription;
  category: (
    where?: CategorySubscriptionWhereInput
  ) => CategorySubscriptionPayloadSubscription;
  shop: (
    where?: ShopSubscriptionWhereInput
  ) => ShopSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "iconCode_ASC"
  | "iconCode_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ShopOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "address_ASC"
  | "address_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CategoriesEnEmbdOrderByInput =
  | "name_ASC"
  | "name_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export interface CategoriesEnEmbdCreateOneInput {
  create?: CategoriesEnEmbdCreateInput;
}

export interface CategoriesEnEmbdWhereInput {
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: CategoriesEnEmbdWhereInput[] | CategoriesEnEmbdWhereInput;
  OR?: CategoriesEnEmbdWhereInput[] | CategoriesEnEmbdWhereInput;
  NOT?: CategoriesEnEmbdWhereInput[] | CategoriesEnEmbdWhereInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface UserCreateWithoutShopsInput {
  name: String;
  email?: String;
}

export interface ShopCreateWithoutOwnerInput {
  name: String;
  address?: String;
}

export interface CategoriesEnEmbdUpsertNestedInput {
  update: CategoriesEnEmbdUpdateDataInput;
  create: CategoriesEnEmbdCreateInput;
}

export interface ShopCreateManyWithoutOwnerInput {
  create?: ShopCreateWithoutOwnerInput[] | ShopCreateWithoutOwnerInput;
  connect?: ShopWhereUniqueInput[] | ShopWhereUniqueInput;
}

export type CategoryWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserCreateInput {
  name: String;
  email?: String;
  shops?: ShopCreateManyWithoutOwnerInput;
}

export interface CategorySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CategoryWhereInput;
  AND?: CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput;
  OR?: CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput;
  NOT?: CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput;
}

export interface ShopUpdateManyMutationInput {
  name?: String;
  address?: String;
}

export interface CategoriesEnEmbdSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CategoriesEnEmbdWhereInput;
  AND?:
    | CategoriesEnEmbdSubscriptionWhereInput[]
    | CategoriesEnEmbdSubscriptionWhereInput;
  OR?:
    | CategoriesEnEmbdSubscriptionWhereInput[]
    | CategoriesEnEmbdSubscriptionWhereInput;
  NOT?:
    | CategoriesEnEmbdSubscriptionWhereInput[]
    | CategoriesEnEmbdSubscriptionWhereInput;
}

export interface ShopUpdateManyDataInput {
  name?: String;
  address?: String;
}

export type ShopWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CategoriesEnEmbdCreateInput {
  name: String;
}

export interface ShopUpsertWithWhereUniqueWithoutOwnerInput {
  where: ShopWhereUniqueInput;
  update: ShopUpdateWithoutOwnerDataInput;
  create: ShopCreateWithoutOwnerInput;
}

export interface CategoriesEnEmbdUpdateManyMutationInput {
  name?: String;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  shops_every?: ShopWhereInput;
  shops_some?: ShopWhereInput;
  shops_none?: ShopWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface UserUpsertWithoutShopsInput {
  update: UserUpdateWithoutShopsDataInput;
  create: UserCreateWithoutShopsInput;
}

export interface ShopUpdateWithWhereUniqueWithoutOwnerInput {
  where: ShopWhereUniqueInput;
  data: ShopUpdateWithoutOwnerDataInput;
}

export interface UserUpdateWithoutShopsDataInput {
  name?: String;
  email?: String;
}

export interface UserUpdateInput {
  name?: String;
  email?: String;
  shops?: ShopUpdateManyWithoutOwnerInput;
}

export interface CategoryCreateInput {
  iconCode: String;
  en?: CategoriesEnEmbdCreateOneInput;
}

export interface ShopSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ShopWhereInput;
  AND?: ShopSubscriptionWhereInput[] | ShopSubscriptionWhereInput;
  OR?: ShopSubscriptionWhereInput[] | ShopSubscriptionWhereInput;
  NOT?: ShopSubscriptionWhereInput[] | ShopSubscriptionWhereInput;
}

export interface UserUpdateOneRequiredWithoutShopsInput {
  create?: UserCreateWithoutShopsInput;
  update?: UserUpdateWithoutShopsDataInput;
  upsert?: UserUpsertWithoutShopsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateManyMutationInput {
  name?: String;
  email?: String;
}

export interface CategoryUpdateInput {
  iconCode?: String;
  en?: CategoriesEnEmbdUpdateOneInput;
}

export interface ShopScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  address?: String;
  address_not?: String;
  address_in?: String[] | String;
  address_not_in?: String[] | String;
  address_lt?: String;
  address_lte?: String;
  address_gt?: String;
  address_gte?: String;
  address_contains?: String;
  address_not_contains?: String;
  address_starts_with?: String;
  address_not_starts_with?: String;
  address_ends_with?: String;
  address_not_ends_with?: String;
  AND?: ShopScalarWhereInput[] | ShopScalarWhereInput;
  OR?: ShopScalarWhereInput[] | ShopScalarWhereInput;
  NOT?: ShopScalarWhereInput[] | ShopScalarWhereInput;
}

export interface CategoriesEnEmbdUpdateOneInput {
  create?: CategoriesEnEmbdCreateInput;
  update?: CategoriesEnEmbdUpdateDataInput;
  upsert?: CategoriesEnEmbdUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
}

export interface ShopUpdateWithoutOwnerDataInput {
  name?: String;
  address?: String;
}

export interface CategoriesEnEmbdUpdateDataInput {
  name?: String;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface UserCreateOneWithoutShopsInput {
  create?: UserCreateWithoutShopsInput;
  connect?: UserWhereUniqueInput;
}

export interface ShopCreateInput {
  name: String;
  address?: String;
  owner: UserCreateOneWithoutShopsInput;
}

export interface CategoryUpdateManyMutationInput {
  iconCode?: String;
}

export interface ShopUpdateInput {
  name?: String;
  address?: String;
  owner?: UserUpdateOneRequiredWithoutShopsInput;
}

export interface CategoryWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  iconCode?: String;
  iconCode_not?: String;
  iconCode_in?: String[] | String;
  iconCode_not_in?: String[] | String;
  iconCode_lt?: String;
  iconCode_lte?: String;
  iconCode_gt?: String;
  iconCode_gte?: String;
  iconCode_contains?: String;
  iconCode_not_contains?: String;
  iconCode_starts_with?: String;
  iconCode_not_starts_with?: String;
  iconCode_ends_with?: String;
  iconCode_not_ends_with?: String;
  en?: CategoriesEnEmbdWhereInput;
  AND?: CategoryWhereInput[] | CategoryWhereInput;
  OR?: CategoryWhereInput[] | CategoryWhereInput;
  NOT?: CategoryWhereInput[] | CategoryWhereInput;
}

export interface ShopUpdateManyWithoutOwnerInput {
  create?: ShopCreateWithoutOwnerInput[] | ShopCreateWithoutOwnerInput;
  delete?: ShopWhereUniqueInput[] | ShopWhereUniqueInput;
  connect?: ShopWhereUniqueInput[] | ShopWhereUniqueInput;
  disconnect?: ShopWhereUniqueInput[] | ShopWhereUniqueInput;
  update?:
    | ShopUpdateWithWhereUniqueWithoutOwnerInput[]
    | ShopUpdateWithWhereUniqueWithoutOwnerInput;
  upsert?:
    | ShopUpsertWithWhereUniqueWithoutOwnerInput[]
    | ShopUpsertWithWhereUniqueWithoutOwnerInput;
  deleteMany?: ShopScalarWhereInput[] | ShopScalarWhereInput;
  updateMany?:
    | ShopUpdateManyWithWhereNestedInput[]
    | ShopUpdateManyWithWhereNestedInput;
}

export interface ShopWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  address?: String;
  address_not?: String;
  address_in?: String[] | String;
  address_not_in?: String[] | String;
  address_lt?: String;
  address_lte?: String;
  address_gt?: String;
  address_gte?: String;
  address_contains?: String;
  address_not_contains?: String;
  address_starts_with?: String;
  address_not_starts_with?: String;
  address_ends_with?: String;
  address_not_ends_with?: String;
  owner?: UserWhereInput;
  AND?: ShopWhereInput[] | ShopWhereInput;
  OR?: ShopWhereInput[] | ShopWhereInput;
  NOT?: ShopWhereInput[] | ShopWhereInput;
}

export interface ShopUpdateManyWithWhereNestedInput {
  where: ShopScalarWhereInput;
  data: ShopUpdateManyDataInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface CategoryEdge {
  node: Category;
  cursor: String;
}

export interface CategoryEdgePromise
  extends Promise<CategoryEdge>,
    Fragmentable {
  node: <T = CategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CategoryEdgeSubscription
  extends Promise<AsyncIterator<CategoryEdge>>,
    Fragmentable {
  node: <T = CategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CategoriesEnEmbdEdge {
  node: CategoriesEnEmbd;
  cursor: String;
}

export interface CategoriesEnEmbdEdgePromise
  extends Promise<CategoriesEnEmbdEdge>,
    Fragmentable {
  node: <T = CategoriesEnEmbdPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CategoriesEnEmbdEdgeSubscription
  extends Promise<AsyncIterator<CategoriesEnEmbdEdge>>,
    Fragmentable {
  node: <T = CategoriesEnEmbdSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCategory {
  count: Int;
}

export interface AggregateCategoryPromise
  extends Promise<AggregateCategory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCategorySubscription
  extends Promise<AsyncIterator<AggregateCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ShopSubscriptionPayload {
  mutation: MutationType;
  node: Shop;
  updatedFields: String[];
  previousValues: ShopPreviousValues;
}

export interface ShopSubscriptionPayloadPromise
  extends Promise<ShopSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ShopPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ShopPreviousValuesPromise>() => T;
}

export interface ShopSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ShopSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ShopSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ShopPreviousValuesSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface CategoryConnection {
  pageInfo: PageInfo;
  edges: CategoryEdge[];
}

export interface CategoryConnectionPromise
  extends Promise<CategoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CategoryEdge>>() => T;
  aggregate: <T = AggregateCategoryPromise>() => T;
}

export interface CategoryConnectionSubscription
  extends Promise<AsyncIterator<CategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCategorySubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CategoriesEnEmbd {
  name: String;
}

export interface CategoriesEnEmbdPromise
  extends Promise<CategoriesEnEmbd>,
    Fragmentable {
  name: () => Promise<String>;
}

export interface CategoriesEnEmbdSubscription
  extends Promise<AsyncIterator<CategoriesEnEmbd>>,
    Fragmentable {
  name: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCategoriesEnEmbd {
  count: Int;
}

export interface AggregateCategoriesEnEmbdPromise
  extends Promise<AggregateCategoriesEnEmbd>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCategoriesEnEmbdSubscription
  extends Promise<AsyncIterator<AggregateCategoriesEnEmbd>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ShopEdge {
  node: Shop;
  cursor: String;
}

export interface ShopEdgePromise extends Promise<ShopEdge>, Fragmentable {
  node: <T = ShopPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ShopEdgeSubscription
  extends Promise<AsyncIterator<ShopEdge>>,
    Fragmentable {
  node: <T = ShopSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CategoriesEnEmbdSubscriptionPayload {
  mutation: MutationType;
  node: CategoriesEnEmbd;
  updatedFields: String[];
  previousValues: CategoriesEnEmbdPreviousValues;
}

export interface CategoriesEnEmbdSubscriptionPayloadPromise
  extends Promise<CategoriesEnEmbdSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CategoriesEnEmbdPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CategoriesEnEmbdPreviousValuesPromise>() => T;
}

export interface CategoriesEnEmbdSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CategoriesEnEmbdSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CategoriesEnEmbdSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CategoriesEnEmbdPreviousValuesSubscription>() => T;
}

export interface CategoriesEnEmbdConnection {
  pageInfo: PageInfo;
  edges: CategoriesEnEmbdEdge[];
}

export interface CategoriesEnEmbdConnectionPromise
  extends Promise<CategoriesEnEmbdConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CategoriesEnEmbdEdge>>() => T;
  aggregate: <T = AggregateCategoriesEnEmbdPromise>() => T;
}

export interface CategoriesEnEmbdConnectionSubscription
  extends Promise<AsyncIterator<CategoriesEnEmbdConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CategoriesEnEmbdEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCategoriesEnEmbdSubscription>() => T;
}

export interface CategoriesEnEmbdPreviousValues {
  name: String;
}

export interface CategoriesEnEmbdPreviousValuesPromise
  extends Promise<CategoriesEnEmbdPreviousValues>,
    Fragmentable {
  name: () => Promise<String>;
}

export interface CategoriesEnEmbdPreviousValuesSubscription
  extends Promise<AsyncIterator<CategoriesEnEmbdPreviousValues>>,
    Fragmentable {
  name: () => Promise<AsyncIterator<String>>;
}

export interface Shop {
  id: ID_Output;
  name: String;
  address?: String;
}

export interface ShopPromise extends Promise<Shop>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  address: () => Promise<String>;
  owner: <T = UserPromise>() => T;
}

export interface ShopSubscription
  extends Promise<AsyncIterator<Shop>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  owner: <T = UserSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface ShopPreviousValues {
  id: ID_Output;
  name: String;
  address?: String;
}

export interface ShopPreviousValuesPromise
  extends Promise<ShopPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  address: () => Promise<String>;
}

export interface ShopPreviousValuesSubscription
  extends Promise<AsyncIterator<ShopPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
}

export interface CategoryPreviousValues {
  id: ID_Output;
  iconCode: String;
}

export interface CategoryPreviousValuesPromise
  extends Promise<CategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  iconCode: () => Promise<String>;
}

export interface CategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<CategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  iconCode: () => Promise<AsyncIterator<String>>;
}

export interface CategorySubscriptionPayload {
  mutation: MutationType;
  node: Category;
  updatedFields: String[];
  previousValues: CategoryPreviousValues;
}

export interface CategorySubscriptionPayloadPromise
  extends Promise<CategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CategoryPreviousValuesPromise>() => T;
}

export interface CategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CategoryPreviousValuesSubscription>() => T;
}

export interface Category {
  id: ID_Output;
  iconCode: String;
}

export interface CategoryPromise extends Promise<Category>, Fragmentable {
  id: () => Promise<ID_Output>;
  iconCode: () => Promise<String>;
  en: <T = CategoriesEnEmbdPromise>() => T;
}

export interface CategorySubscription
  extends Promise<AsyncIterator<Category>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  iconCode: () => Promise<AsyncIterator<String>>;
  en: <T = CategoriesEnEmbdSubscription>() => T;
}

export interface AggregateShop {
  count: Int;
}

export interface AggregateShopPromise
  extends Promise<AggregateShop>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateShopSubscription
  extends Promise<AsyncIterator<AggregateShop>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  name: String;
  email?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  shops: <T = FragmentableArray<Shop>>(
    args?: {
      where?: ShopWhereInput;
      orderBy?: ShopOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  shops: <T = Promise<AsyncIterator<ShopSubscription>>>(
    args?: {
      where?: ShopWhereInput;
      orderBy?: ShopOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ShopConnection {
  pageInfo: PageInfo;
  edges: ShopEdge[];
}

export interface ShopConnectionPromise
  extends Promise<ShopConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ShopEdge>>() => T;
  aggregate: <T = AggregateShopPromise>() => T;
}

export interface ShopConnectionSubscription
  extends Promise<AsyncIterator<ShopConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ShopEdgeSubscription>>>() => T;
  aggregate: <T = AggregateShopSubscription>() => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "CategoriesEnEmbd",
    embedded: false
  },
  {
    name: "Category",
    embedded: false
  },
  {
    name: "Shop",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466/bishooservice`
});
export const prisma = new Prisma();
